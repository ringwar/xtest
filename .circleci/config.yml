version: 2
jobs:
  tests:
    docker:
      - image: circleci/python:3.7.5

    working_directory: ~/x_server

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - deps-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          name: install dependencies
          command: |
            python3 -m venv env
            . env/bin/activate
            pip install -r requirements.txt
      - run:
          name: run tests
          command: |
            . env/bin/activate
            python manage.py test
      - save_cache:
          paths:
            - ./env
          key: deps-{{ .Branch }}-{{ checksum "requirements.txt" }}

  deploy:
    docker:
      - image: circleci/python:3.7.5

    working_directory: ~/x_server

    steps:
      - checkout

      - restore_cache:
          keys:
            - deps-{{ .Branch }}-{{ checksum "requirements.txt" }}

      - setup_remote_docker:
          docker_layer_caching: true

      - deploy:
          name: AWS Deployment
          command: |
            . env/bin/activate

            `aws ecr get-login --no-include-email --region ap-northeast-2`
            aws configure set default.region ap-northeast-2


            if [ "${CIRCLE_BRANCH}" == "xdev-release" ]; then

              docker build -t x-server-gunicorn .
              docker build -t x-server-nginx ./nginx
              docker tag x-server-gunicorn:latest 986937772248.dkr.ecr.ap-northeast-2.amazonaws.com/x-server:dev-gunicorn-latest
              docker tag x-server-nginx:latest 986937772248.dkr.ecr.ap-northeast-2.amazonaws.com/x-server:dev-nginx-latest

              docker push 986937772248.dkr.ecr.ap-northeast-2.amazonaws.com/x-server:dev-gunicorn-latest
              docker push 986937772248.dkr.ecr.ap-northeast-2.amazonaws.com/x-server:dev-nginx-latest

              aws ecs register-task-definition --cli-input-json file://`pwd`/deployments/ecs-dev.json
              aws ecs update-service --cli-input-json file://`pwd`/deployments/service-dev.json

              TASKARN=`aws ecs list-tasks --cluster x-server-dev --output json | grep arn: | cut -d "\"" -f2 | tr -d "\n \t"`

              if [ ! -z ${TASKARN} ]; then
                aws ecs stop-task --cluster x-server-dev --task ${TASKARN}
              fi

              INSTANCEARN=`aws ecs list-container-instances --cluster x-server-dev --output json| grep arn: | cut -d "\"" -f2 | tr -d "\n \t"`
              if [ ! -z ${INSTANCEARN} ]; then
                aws ecs start-task --cluster x-server-dev --task-definition x-server-dev --container-instances ${INSTANCEARN}
              else
                exit 1
              fi


            fi

workflows:
  version: 2
  tests-and-deploy:
    jobs:
      - tests
      - deploy:
          requires:
            - tests
          filters:
            branches:
              only:
                - xdev-release
